import java.nio.file.Files

import static java.nio.file.Files.*

print("Docker OS...")
def dockerOS = getDockerOS()
println(dockerOS)

configure(subprojects.findAll { it.parent.name.equals('images') }) {
    apply plugin: 'base'

    task copyDockerfile(type: Copy) {
        from file("Dockerfile.${dockerOS}")
        into file("${project.buildDir}")
        rename { fname -> fname - ".${dockerOS}" }
    }

    task copyBootJar {
        dependsOn ":services:${project.name}:build"
        doLast {
            def srcProj  = project(":services:${project.name}")
            def dstProj  = project(":images:${project.name}")
            def srcBootJar = new File("${srcProj.buildDir}/libs/${srcProj.jar.archiveName}")
            def dstBootJar = new File("${dstProj.buildDir}/${srcProj.jar.archiveName}")
            if (dstBootJar.exists()) {
                dstBootJar.delete()
            }
            dstBootJar.parentFile.mkdirs()
            Files.copy(srcBootJar.toPath(), dstBootJar.toPath())
        }
    }

    task buildDockerImage(type: Exec) {
        description 'Assembles a Docker image for this project.'
        group = 'Build'
        dependsOn copyDockerfile
        def serviceProject = findProject(":services:${project.name}")
        if (serviceProject != null) {
            dependsOn copyBootJar
        }
        def version = project.properties["version.${dockerOS}"]
        def rev = project.properties["rev.${dockerOS}"]
        def tag = "${project.name}:${version}${rev}-${dockerOS}"
        if (dockerNamespace) {
            tag = "${dockerNamespace}/${tag}"
        }
        commandLine 'docker', 'build', '-t', tag, project.buildDir
    }

    build.dependsOn buildDockerImage
}

String getDockerOS() {
    try {
        Process process = 'docker version'.execute()
        if (process.waitFor() != 0) {
            throw new GradleScriptException("Cannot connect to docker daemon", null)
        }
        return (process.in.text =~ /(?ms)Server:.*OS\/Arch:\s+(\S+)\//)[0][1]
    } catch (IOException e) {
        throw new GradleScriptException("Cannot run 'docker'", e)
    }
}
